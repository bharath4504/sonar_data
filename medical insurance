{"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"datasetId":3435279,"sourceId":5995753,"sourceType":"datasetVersion"}],"dockerImageVersionId":30698,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":8.226434,"end_time":"2024-04-26T10:38:37.418008","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-04-26T10:38:29.191574","version":"2.5.0"}},"nbformat_minor":5,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n\n# Metrics\nfrom sklearn.metrics import precision_score, accuracy_score, recall_score, confusion_matrix, f1_score, mean_squared_error, mean_absolute_error, r2_score\n\n# models\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import BayesianRidge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.tree import DecisionTreeClassifier\n","metadata":{"papermill":{"duration":3.033947,"end_time":"2024-04-26T10:38:35.143105","exception":false,"start_time":"2024-04-26T10:38:32.109158","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-06T20:16:19.438150Z","iopub.execute_input":"2024-07-06T20:16:19.438531Z","iopub.status.idle":"2024-07-06T20:16:19.447691Z","shell.execute_reply.started":"2024-07-06T20:16:19.438500Z","shell.execute_reply":"2024-07-06T20:16:19.445900Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"file_path = '/kaggle/input/medical-insurance-predictio/Medical_insurance.csv'\ndf = pd.read_csv(file_path)","metadata":{"papermill":{"duration":0.038148,"end_time":"2024-04-26T10:38:35.187186","exception":false,"start_time":"2024-04-26T10:38:35.149038","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-06T20:16:19.450169Z","iopub.execute_input":"2024-07-06T20:16:19.451312Z","iopub.status.idle":"2024-07-06T20:16:19.477462Z","shell.execute_reply.started":"2024-07-06T20:16:19.451272Z","shell.execute_reply":"2024-07-06T20:16:19.476147Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"papermill":{"duration":0.034112,"end_time":"2024-04-26T10:38:35.227485","exception":false,"start_time":"2024-04-26T10:38:35.193373","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-07-06T20:16:19.479041Z","iopub.execute_input":"2024-07-06T20:16:19.479408Z","iopub.status.idle":"2024-07-06T20:16:19.495502Z","shell.execute_reply.started":"2024-07-06T20:16:19.479374Z","shell.execute_reply":"2024-07-06T20:16:19.494329Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"   age     sex     bmi  children smoker     region      charges\n0   19  female  27.900         0    yes  southwest  16884.92400\n1   18    male  33.770         1     no  southeast   1725.55230\n2   28    male  33.000         3     no  southeast   4449.46200\n3   33    male  22.705         0     no  northwest  21984.47061\n4   32    male  28.880         0     no  northwest   3866.85520","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>bmi</th>\n      <th>children</th>\n      <th>smoker</th>\n      <th>region</th>\n      <th>charges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19</td>\n      <td>female</td>\n      <td>27.900</td>\n      <td>0</td>\n      <td>yes</td>\n      <td>southwest</td>\n      <td>16884.92400</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>18</td>\n      <td>male</td>\n      <td>33.770</td>\n      <td>1</td>\n      <td>no</td>\n      <td>southeast</td>\n      <td>1725.55230</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>28</td>\n      <td>male</td>\n      <td>33.000</td>\n      <td>3</td>\n      <td>no</td>\n      <td>southeast</td>\n      <td>4449.46200</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>33</td>\n      <td>male</td>\n      <td>22.705</td>\n      <td>0</td>\n      <td>no</td>\n      <td>northwest</td>\n      <td>21984.47061</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32</td>\n      <td>male</td>\n      <td>28.880</td>\n      <td>0</td>\n      <td>no</td>\n      <td>northwest</td>\n      <td>3866.85520</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.info()","metadata":{"papermill":{"duration":0.035706,"end_time":"2024-04-26T10:38:35.269302","exception":false,"start_time":"2024-04-26T10:38:35.233596","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = df[['age','bmi','smoker','charges']]","metadata":{"papermill":{"duration":0.018341,"end_time":"2024-04-26T10:38:35.293962","exception":false,"start_time":"2024-04-26T10:38:35.275621","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['charges'] = df['charges'].round(2)","metadata":{"papermill":{"duration":0.016069,"end_time":"2024-04-26T10:38:35.316320","exception":false,"start_time":"2024-04-26T10:38:35.300251","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder, StandardScaler\n\nle = LabelEncoder()\n\nencoded_col = ['smoker']\nfor x in encoded_col:\n    df[x] = le.fit_transform(df[x])","metadata":{"papermill":{"duration":0.015755,"end_time":"2024-04-26T10:38:35.338308","exception":false,"start_time":"2024-04-26T10:38:35.322553","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Splitting the data into training and test\nX = df.drop('charges', axis=1)\nY = df['charges']\n\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size = 0.2, random_state = 42)","metadata":{"papermill":{"duration":0.022118,"end_time":"2024-04-26T10:38:35.366657","exception":false,"start_time":"2024-04-26T10:38:35.344539","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Scaling the data\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n","metadata":{"papermill":{"duration":0.019863,"end_time":"2024-04-26T10:38:35.392902","exception":false,"start_time":"2024-04-26T10:38:35.373039","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### DECISION TREE","metadata":{"papermill":{"duration":0.005951,"end_time":"2024-04-26T10:38:35.405053","exception":false,"start_time":"2024-04-26T10:38:35.399102","status":"completed"},"tags":[]}},{"cell_type":"code","source":"dt_model = DecisionTreeRegressor()\ndt_model.fit(X_train, Y_train)","metadata":{"papermill":{"duration":0.027304,"end_time":"2024-04-26T10:38:35.438509","exception":false,"start_time":"2024-04-26T10:38:35.411205","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Y_pred1 = dt_model.predict(X_test)","metadata":{"papermill":{"duration":0.018101,"end_time":"2024-04-26T10:38:35.463155","exception":false,"start_time":"2024-04-26T10:38:35.445054","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Compute metrics\ndt_mse = mean_squared_error(Y_test, Y_pred1)\ndt_rmse = mean_squared_error(Y_test, Y_pred1, squared=False)\ndt_mae = mean_absolute_error(Y_test, Y_pred1)\ndt_r2 = r2_score(Y_test, Y_pred1)","metadata":{"papermill":{"duration":0.018746,"end_time":"2024-04-26T10:38:35.488332","exception":false,"start_time":"2024-04-26T10:38:35.469586","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Scatter plot of actual vs predicted value\nplt.scatter(Y_test, Y_pred1, color = 'blue', label = 'predictions' , s=7)\nplt.scatter(Y_test, Y_test , color ='red', label = 'actual', s=1)\n\nplt.xlabel('Actual Charges')\nplt.ylabel('Predictes Charges')\nplt.title('Decision tree: Actual VS Predicted charges')\nplt.legend()\nplt.show()\n\n# Printing metrics\nprint('Mean Squared Error (MSE):', dt_mse)\nprint('Root Mean Squared Error (RMSE):', dt_rmse)\nprint('Mean Absolute Error (MAE):', dt_mae)\nprint('R-squared (R2) Score:', dt_r2)\n","metadata":{"papermill":{"duration":0.371703,"end_time":"2024-04-26T10:38:35.866667","exception":false,"start_time":"2024-04-26T10:38:35.494964","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### LINEAR REGRESSION","metadata":{"papermill":{"duration":0.007488,"end_time":"2024-04-26T10:38:35.881637","exception":false,"start_time":"2024-04-26T10:38:35.874149","status":"completed"},"tags":[]}},{"cell_type":"code","source":"lr_model = LinearRegression()\nlr_model.fit(X_train, Y_train)","metadata":{"papermill":{"duration":0.037819,"end_time":"2024-04-26T10:38:35.926791","exception":false,"start_time":"2024-04-26T10:38:35.888972","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Y_pred2 = lr_model.predict(X_test)","metadata":{"papermill":{"duration":0.01694,"end_time":"2024-04-26T10:38:35.951204","exception":false,"start_time":"2024-04-26T10:38:35.934264","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Compute metrics\nlr_mse = mean_squared_error(Y_test, Y_pred2)\nlr_rmse = mean_squared_error(Y_test, Y_pred2, squared = False)\nlr_mae = mean_absolute_error(Y_test, Y_pred2)\nlr_r2 = r2_score(Y_test,Y_pred2)","metadata":{"papermill":{"duration":0.018759,"end_time":"2024-04-26T10:38:35.977378","exception":false,"start_time":"2024-04-26T10:38:35.958619","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n#Scatter plot of actual VS predicted value\n \nplt.scatter(Y_test, Y_pred2, color='blue',label = 'Predictions', s=7)\nplt.scatter(Y_test, Y_test, color = 'red', label = 'actual', s = 7)\n\nplt.xlabel('Actual changes')\nplt.ylabel('Predicted changes')\nplt.title('Linear Regression: Actual VS Predicted Charges')\nplt.legend()\nplt.show()\n\n# Printing metrics\nprint('mean standard error(MSE):', lr_mse)\nprint('Root Mean Squared Error (RMSE):', lr_rmse)\nprint('Mean Absolute Error (MAE):', lr_mae)\nprint('R-squared (R2) Score:', lr_r2)\n","metadata":{"papermill":{"duration":0.337966,"end_time":"2024-04-26T10:38:36.323006","exception":false,"start_time":"2024-04-26T10:38:35.985040","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### BEYESIAN REGRESSION","metadata":{"papermill":{"duration":0.00791,"end_time":"2024-04-26T10:38:36.339102","exception":false,"start_time":"2024-04-26T10:38:36.331192","status":"completed"},"tags":[]}},{"cell_type":"code","source":"br_model = BayesianRidge()\nbr_model.fit(X_train,Y_train)","metadata":{"papermill":{"duration":0.022989,"end_time":"2024-04-26T10:38:36.370308","exception":false,"start_time":"2024-04-26T10:38:36.347319","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Y_pred3 = br_model.predict(X_test)","metadata":{"papermill":{"duration":0.018889,"end_time":"2024-04-26T10:38:36.397660","exception":false,"start_time":"2024-04-26T10:38:36.378771","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Compute metrics\nbr_mse = mean_squared_error(Y_test, Y_pred3)\nbr_rmse = mean_squared_error(Y_test, Y_pred3, squared=False)\nbr_mae = mean_absolute_error(Y_test, Y_pred3)\nbr_r2 = r2_score(Y_test, Y_pred3)","metadata":{"papermill":{"duration":0.021165,"end_time":"2024-04-26T10:38:36.427388","exception":false,"start_time":"2024-04-26T10:38:36.406223","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Scatter plot of actual vs predicted values\nplt.scatter(Y_test, Y_pred3, color='blue', label='Predictions', s=7)\nplt.scatter(Y_test, Y_test, color='red', label='Actual',s=6)\n\nplt.xlabel('Actual Charges')\nplt.ylabel('Predicted Charges')\nplt.title('Bayesian Regression : Actual vs Predicted Charges')\nplt.legend()\nplt.show()\n\n# Printing metrics\nprint('Mean Squared Error (MSE):', br_mse)\nprint('Root Mean Squared Error (RMSE):', br_rmse)\nprint('Mean Absolute Error (MAE):', br_mae)\nprint('R-squared (R2) Score:', br_r2)","metadata":{"papermill":{"duration":0.350568,"end_time":"2024-04-26T10:38:36.786625","exception":false,"start_time":"2024-04-26T10:38:36.436057","status":"completed"},"tags":[],"trusted":true},"execution_count":null,"outputs":[]}]}